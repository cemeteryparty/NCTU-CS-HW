Terminals unused in grammar

   DEF


Grammar

    0 $accept: program $end

    1 program: program_name ';' decl_scope func_decl_scope compound_stmt END

    2 program_name: ID

    3 decl_scope: %empty
    4           | multi_decl

    5 multi_decl: decl multi_decl
    6           | decl

    7 decl: VAR id_type_pair ';'

    8 id_type_pair: id_list ':' type_of_decl

    9 id_list: %empty
   10        | multi_id_list

   11 multi_id_list: multi_id_list ',' ID
   12              | ID

   13 type_of_decl: TYPE
   14             | ARR DEC OF array_type
   15             | literal_const

   16 array_type: TYPE
   17           | ARR DEC OF array_type

   18 literal_const: SCI
   19              | FP
   20              | OCT
   21              | DEC
   22              | BOOLCONST
   23              | STR

   24 func_decl_scope: %empty
   25                | multi_func_decl

   26 multi_func_decl: multi_func_decl func_decl
   27                | func_decl

   28 func_decl: ID '(' argument ')' type_of_ret func_body

   29 argument: %empty
   30         | multi_args

   31 multi_args: multi_args id_type_pair
   32           | id_type_pair

   33 type_of_ret: %empty
   34            | ':' TYPE

   35 func_body: ';'
   36          | compound_stmt END

   37 compound_stmt: BEG decl_scope stmt_scope END

   38 stmt_scope: %empty
   39           | multi_stmt

   40 multi_stmt: stmt multi_stmt
   41           | stmt

   42 stmt: compound_stmt
   43     | simple_stmt ';'
   44     | branch
   45     | while_stmt
   46     | for_stmt
   47     | ret_stmt
   48     | proc_call

   49 simple_stmt: var_ref ASSIGN exp
   50            | PRINT exp
   51            | READ var_ref

   52 var_ref: ID arr_ref

   53 arr_ref: %empty
   54        | '[' exp ']' arr_ref

   55 exp: '(' exp ')'
   56    | '-' exp
   57    | NOT exp
   58    | exp '*' exp
   59    | exp '/' exp
   60    | exp MOD exp
   61    | exp '+' exp
   62    | exp '-' exp
   63    | exp LT exp
   64    | exp LE exp
   65    | exp NE exp
   66    | exp GE exp
   67    | exp GT exp
   68    | exp EQ exp
   69    | exp AND exp
   70    | exp OR exp
   71    | var_ref
   72    | SCI
   73    | FP
   74    | OCT
   75    | DEC
   76    | BOOLCONST
   77    | STR
   78    | func_call

   79 branch: IF exp THEN compound_stmt branch_body END IF

   80 branch_body: %empty
   81            | ELSE compound_stmt

   82 while_stmt: WHILE exp DO compound_stmt END DO

   83 for_stmt: FOR ID ASSIGN DEC TO DEC DO compound_stmt END DO

   84 ret_stmt: RETURN exp ';'

   85 proc_call: func_call ';'

   86 func_call: ID '(' arg2func ')'

   87 arg2func: %empty
   88         | multi_exp

   89 multi_exp: multi_exp ',' exp
   90          | exp


Terminals, with rules where they appear

$end (0) 0
'(' (40) 28 55 86
')' (41) 28 55 86
'*' (42) 58
'+' (43) 61
',' (44) 11 89
'-' (45) 56 62
'/' (47) 59
':' (58) 8 34
';' (59) 1 7 35 43 84 85
'[' (91) 54
']' (93) 54
error (256)
ID (258) 2 11 12 28 52 83 86
SCI (259) 18 72
FP (260) 19 73
OCT (261) 20 74
DEC (262) 14 17 21 75 83
BOOLCONST (263) 22 76
STR (264) 23 77
TYPE (265) 13 16 34
ARR (266) 14 17
BEG (267) 37
END (268) 1 36 37 79 82 83
DEF (269)
IF (270) 79
THEN (271) 79
ELSE (272) 81
DO (273) 82 83
FOR (274) 83
WHILE (275) 82
OF (276) 14 17
PRINT (277) 50
READ (278) 51
TO (279) 83
RETURN (280) 84
VAR (281) 7
ASSIGN (282) 49 83
GROUP (283)
NOT (284) 57
NEG (285)
MOD (286) 60
LT (287) 63
LE (288) 64
NE (289) 65
GE (290) 66
GT (291) 67
EQ (292) 68
AND (293) 69
OR (294) 70


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1, on right: 0
program_name (53)
    on left: 2, on right: 1
decl_scope (54)
    on left: 3 4, on right: 1 37
multi_decl (55)
    on left: 5 6, on right: 4 5
decl (56)
    on left: 7, on right: 5 6
id_type_pair (57)
    on left: 8, on right: 7 31 32
id_list (58)
    on left: 9 10, on right: 8
multi_id_list (59)
    on left: 11 12, on right: 10 11
type_of_decl (60)
    on left: 13 14 15, on right: 8
array_type (61)
    on left: 16 17, on right: 14 17
literal_const (62)
    on left: 18 19 20 21 22 23, on right: 15
func_decl_scope (63)
    on left: 24 25, on right: 1
multi_func_decl (64)
    on left: 26 27, on right: 25 26
func_decl (65)
    on left: 28, on right: 26 27
argument (66)
    on left: 29 30, on right: 28
multi_args (67)
    on left: 31 32, on right: 30 31
type_of_ret (68)
    on left: 33 34, on right: 28
func_body (69)
    on left: 35 36, on right: 28
compound_stmt (70)
    on left: 37, on right: 1 36 42 79 81 82 83
stmt_scope (71)
    on left: 38 39, on right: 37
multi_stmt (72)
    on left: 40 41, on right: 39 40
stmt (73)
    on left: 42 43 44 45 46 47 48, on right: 40 41
simple_stmt (74)
    on left: 49 50 51, on right: 43
var_ref (75)
    on left: 52, on right: 49 51 71
arr_ref (76)
    on left: 53 54, on right: 52 54
exp (77)
    on left: 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72
    73 74 75 76 77 78, on right: 49 50 54 55 56 57 58 59 60 61 62 63
    64 65 66 67 68 69 70 79 82 84 89 90
branch (78)
    on left: 79, on right: 44
branch_body (79)
    on left: 80 81, on right: 79
while_stmt (80)
    on left: 82, on right: 45
for_stmt (81)
    on left: 83, on right: 46
ret_stmt (82)
    on left: 84, on right: 47
proc_call (83)
    on left: 85, on right: 48
func_call (84)
    on left: 86, on right: 78 85
arg2func (85)
    on left: 87 88, on right: 86
multi_exp (86)
    on left: 89 90, on right: 88 89


State 0

    0 $accept: . program $end

    ID  shift, and go to state 1

    program       go to state 2
    program_name  go to state 3


State 1

    2 program_name: ID .

    $default  reduce using rule 2 (program_name)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: program_name . ';' decl_scope func_decl_scope compound_stmt END

    ';'  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: program_name ';' . decl_scope func_decl_scope compound_stmt END

    VAR  shift, and go to state 6

    $default  reduce using rule 3 (decl_scope)

    decl_scope  go to state 7
    multi_decl  go to state 8
    decl        go to state 9


State 6

    7 decl: VAR . id_type_pair ';'

    ID  shift, and go to state 10

    $default  reduce using rule 9 (id_list)

    id_type_pair   go to state 11
    id_list        go to state 12
    multi_id_list  go to state 13


State 7

    1 program: program_name ';' decl_scope . func_decl_scope compound_stmt END

    ID  shift, and go to state 14

    $default  reduce using rule 24 (func_decl_scope)

    func_decl_scope  go to state 15
    multi_func_decl  go to state 16
    func_decl        go to state 17


State 8

    4 decl_scope: multi_decl .

    $default  reduce using rule 4 (decl_scope)


State 9

    5 multi_decl: decl . multi_decl
    6           | decl .

    VAR  shift, and go to state 6

    $default  reduce using rule 6 (multi_decl)

    multi_decl  go to state 18
    decl        go to state 9


State 10

   12 multi_id_list: ID .

    $default  reduce using rule 12 (multi_id_list)


State 11

    7 decl: VAR id_type_pair . ';'

    ';'  shift, and go to state 19


State 12

    8 id_type_pair: id_list . ':' type_of_decl

    ':'  shift, and go to state 20


State 13

   10 id_list: multi_id_list .
   11 multi_id_list: multi_id_list . ',' ID

    ','  shift, and go to state 21

    $default  reduce using rule 10 (id_list)


State 14

   28 func_decl: ID . '(' argument ')' type_of_ret func_body

    '('  shift, and go to state 22


State 15

    1 program: program_name ';' decl_scope func_decl_scope . compound_stmt END

    BEG  shift, and go to state 23

    compound_stmt  go to state 24


State 16

   25 func_decl_scope: multi_func_decl .
   26 multi_func_decl: multi_func_decl . func_decl

    ID  shift, and go to state 14

    $default  reduce using rule 25 (func_decl_scope)

    func_decl  go to state 25


State 17

   27 multi_func_decl: func_decl .

    $default  reduce using rule 27 (multi_func_decl)


State 18

    5 multi_decl: decl multi_decl .

    $default  reduce using rule 5 (multi_decl)


State 19

    7 decl: VAR id_type_pair ';' .

    $default  reduce using rule 7 (decl)


State 20

    8 id_type_pair: id_list ':' . type_of_decl

    SCI        shift, and go to state 26
    FP         shift, and go to state 27
    OCT        shift, and go to state 28
    DEC        shift, and go to state 29
    BOOLCONST  shift, and go to state 30
    STR        shift, and go to state 31
    TYPE       shift, and go to state 32
    ARR        shift, and go to state 33

    type_of_decl   go to state 34
    literal_const  go to state 35


State 21

   11 multi_id_list: multi_id_list ',' . ID

    ID  shift, and go to state 36


State 22

   28 func_decl: ID '(' . argument ')' type_of_ret func_body

    ID  shift, and go to state 10

    ')'       reduce using rule 29 (argument)
    $default  reduce using rule 9 (id_list)

    id_type_pair   go to state 37
    id_list        go to state 12
    multi_id_list  go to state 13
    argument       go to state 38
    multi_args     go to state 39


State 23

   37 compound_stmt: BEG . decl_scope stmt_scope END

    VAR  shift, and go to state 6

    $default  reduce using rule 3 (decl_scope)

    decl_scope  go to state 40
    multi_decl  go to state 8
    decl        go to state 9


State 24

    1 program: program_name ';' decl_scope func_decl_scope compound_stmt . END

    END  shift, and go to state 41


State 25

   26 multi_func_decl: multi_func_decl func_decl .

    $default  reduce using rule 26 (multi_func_decl)


State 26

   18 literal_const: SCI .

    $default  reduce using rule 18 (literal_const)


State 27

   19 literal_const: FP .

    $default  reduce using rule 19 (literal_const)


State 28

   20 literal_const: OCT .

    $default  reduce using rule 20 (literal_const)


State 29

   21 literal_const: DEC .

    $default  reduce using rule 21 (literal_const)


State 30

   22 literal_const: BOOLCONST .

    $default  reduce using rule 22 (literal_const)


State 31

   23 literal_const: STR .

    $default  reduce using rule 23 (literal_const)


State 32

   13 type_of_decl: TYPE .

    $default  reduce using rule 13 (type_of_decl)


State 33

   14 type_of_decl: ARR . DEC OF array_type

    DEC  shift, and go to state 42


State 34

    8 id_type_pair: id_list ':' type_of_decl .

    $default  reduce using rule 8 (id_type_pair)


State 35

   15 type_of_decl: literal_const .

    $default  reduce using rule 15 (type_of_decl)


State 36

   11 multi_id_list: multi_id_list ',' ID .

    $default  reduce using rule 11 (multi_id_list)


State 37

   32 multi_args: id_type_pair .

    $default  reduce using rule 32 (multi_args)


State 38

   28 func_decl: ID '(' argument . ')' type_of_ret func_body

    ')'  shift, and go to state 43


State 39

   30 argument: multi_args .
   31 multi_args: multi_args . id_type_pair

    ID  shift, and go to state 10

    ')'       reduce using rule 30 (argument)
    $default  reduce using rule 9 (id_list)

    id_type_pair   go to state 44
    id_list        go to state 12
    multi_id_list  go to state 13


State 40

   37 compound_stmt: BEG decl_scope . stmt_scope END

    ID      shift, and go to state 45
    BEG     shift, and go to state 23
    IF      shift, and go to state 46
    FOR     shift, and go to state 47
    WHILE   shift, and go to state 48
    PRINT   shift, and go to state 49
    READ    shift, and go to state 50
    RETURN  shift, and go to state 51

    $default  reduce using rule 38 (stmt_scope)

    compound_stmt  go to state 52
    stmt_scope     go to state 53
    multi_stmt     go to state 54
    stmt           go to state 55
    simple_stmt    go to state 56
    var_ref        go to state 57
    branch         go to state 58
    while_stmt     go to state 59
    for_stmt       go to state 60
    ret_stmt       go to state 61
    proc_call      go to state 62
    func_call      go to state 63


State 41

    1 program: program_name ';' decl_scope func_decl_scope compound_stmt END .

    $default  reduce using rule 1 (program)


State 42

   14 type_of_decl: ARR DEC . OF array_type

    OF  shift, and go to state 64


State 43

   28 func_decl: ID '(' argument ')' . type_of_ret func_body

    ':'  shift, and go to state 65

    $default  reduce using rule 33 (type_of_ret)

    type_of_ret  go to state 66


State 44

   31 multi_args: multi_args id_type_pair .

    $default  reduce using rule 31 (multi_args)


State 45

   52 var_ref: ID . arr_ref
   86 func_call: ID . '(' arg2func ')'

    '('  shift, and go to state 67
    '['  shift, and go to state 68

    $default  reduce using rule 53 (arr_ref)

    arr_ref  go to state 69


State 46

   79 branch: IF . exp THEN compound_stmt branch_body END IF

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 80
    func_call  go to state 81


State 47

   83 for_stmt: FOR . ID ASSIGN DEC TO DEC DO compound_stmt END DO

    ID  shift, and go to state 82


State 48

   82 while_stmt: WHILE . exp DO compound_stmt END DO

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 83
    func_call  go to state 81


State 49

   50 simple_stmt: PRINT . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 84
    func_call  go to state 81


State 50

   51 simple_stmt: READ . var_ref

    ID  shift, and go to state 85

    var_ref  go to state 86


State 51

   84 ret_stmt: RETURN . exp ';'

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 87
    func_call  go to state 81


State 52

   42 stmt: compound_stmt .

    $default  reduce using rule 42 (stmt)


State 53

   37 compound_stmt: BEG decl_scope stmt_scope . END

    END  shift, and go to state 88


State 54

   39 stmt_scope: multi_stmt .

    $default  reduce using rule 39 (stmt_scope)


State 55

   40 multi_stmt: stmt . multi_stmt
   41           | stmt .

    ID      shift, and go to state 45
    BEG     shift, and go to state 23
    IF      shift, and go to state 46
    FOR     shift, and go to state 47
    WHILE   shift, and go to state 48
    PRINT   shift, and go to state 49
    READ    shift, and go to state 50
    RETURN  shift, and go to state 51

    $default  reduce using rule 41 (multi_stmt)

    compound_stmt  go to state 52
    multi_stmt     go to state 89
    stmt           go to state 55
    simple_stmt    go to state 56
    var_ref        go to state 57
    branch         go to state 58
    while_stmt     go to state 59
    for_stmt       go to state 60
    ret_stmt       go to state 61
    proc_call      go to state 62
    func_call      go to state 63


State 56

   43 stmt: simple_stmt . ';'

    ';'  shift, and go to state 90


State 57

   49 simple_stmt: var_ref . ASSIGN exp

    ASSIGN  shift, and go to state 91


State 58

   44 stmt: branch .

    $default  reduce using rule 44 (stmt)


State 59

   45 stmt: while_stmt .

    $default  reduce using rule 45 (stmt)


State 60

   46 stmt: for_stmt .

    $default  reduce using rule 46 (stmt)


State 61

   47 stmt: ret_stmt .

    $default  reduce using rule 47 (stmt)


State 62

   48 stmt: proc_call .

    $default  reduce using rule 48 (stmt)


State 63

   85 proc_call: func_call . ';'

    ';'  shift, and go to state 92


State 64

   14 type_of_decl: ARR DEC OF . array_type

    TYPE  shift, and go to state 93
    ARR   shift, and go to state 94

    array_type  go to state 95


State 65

   34 type_of_ret: ':' . TYPE

    TYPE  shift, and go to state 96


State 66

   28 func_decl: ID '(' argument ')' type_of_ret . func_body

    BEG  shift, and go to state 23
    ';'  shift, and go to state 97

    func_body      go to state 98
    compound_stmt  go to state 99


State 67

   86 func_call: ID '(' . arg2func ')'

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    $default  reduce using rule 87 (arg2func)

    var_ref    go to state 79
    exp        go to state 100
    func_call  go to state 81
    arg2func   go to state 101
    multi_exp  go to state 102


State 68

   54 arr_ref: '[' . exp ']' arr_ref

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 103
    func_call  go to state 81


State 69

   52 var_ref: ID arr_ref .

    $default  reduce using rule 52 (var_ref)


State 70

   72 exp: SCI .

    $default  reduce using rule 72 (exp)


State 71

   73 exp: FP .

    $default  reduce using rule 73 (exp)


State 72

   74 exp: OCT .

    $default  reduce using rule 74 (exp)


State 73

   75 exp: DEC .

    $default  reduce using rule 75 (exp)


State 74

   76 exp: BOOLCONST .

    $default  reduce using rule 76 (exp)


State 75

   77 exp: STR .

    $default  reduce using rule 77 (exp)


State 76

   57 exp: NOT . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 104
    func_call  go to state 81


State 77

   56 exp: '-' . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 105
    func_call  go to state 81


State 78

   55 exp: '(' . exp ')'

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 106
    func_call  go to state 81


State 79

   71 exp: var_ref .

    $default  reduce using rule 71 (exp)


State 80

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp
   79 branch: IF exp . THEN compound_stmt branch_body END IF

    THEN  shift, and go to state 107
    '*'   shift, and go to state 108
    '/'   shift, and go to state 109
    MOD   shift, and go to state 110
    '+'   shift, and go to state 111
    '-'   shift, and go to state 112
    LT    shift, and go to state 113
    LE    shift, and go to state 114
    NE    shift, and go to state 115
    GE    shift, and go to state 116
    GT    shift, and go to state 117
    EQ    shift, and go to state 118
    AND   shift, and go to state 119
    OR    shift, and go to state 120


State 81

   78 exp: func_call .

    $default  reduce using rule 78 (exp)


State 82

   83 for_stmt: FOR ID . ASSIGN DEC TO DEC DO compound_stmt END DO

    ASSIGN  shift, and go to state 121


State 83

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp
   82 while_stmt: WHILE exp . DO compound_stmt END DO

    DO   shift, and go to state 122
    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    MOD  shift, and go to state 110
    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120


State 84

   50 simple_stmt: PRINT exp .
   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    MOD  shift, and go to state 110
    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 50 (simple_stmt)


State 85

   52 var_ref: ID . arr_ref

    '['  shift, and go to state 68

    $default  reduce using rule 53 (arr_ref)

    arr_ref  go to state 69


State 86

   51 simple_stmt: READ var_ref .

    $default  reduce using rule 51 (simple_stmt)


State 87

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp
   84 ret_stmt: RETURN exp . ';'

    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    MOD  shift, and go to state 110
    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120
    ';'  shift, and go to state 123


State 88

   37 compound_stmt: BEG decl_scope stmt_scope END .

    $default  reduce using rule 37 (compound_stmt)


State 89

   40 multi_stmt: stmt multi_stmt .

    $default  reduce using rule 40 (multi_stmt)


State 90

   43 stmt: simple_stmt ';' .

    $default  reduce using rule 43 (stmt)


State 91

   49 simple_stmt: var_ref ASSIGN . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 124
    func_call  go to state 81


State 92

   85 proc_call: func_call ';' .

    $default  reduce using rule 85 (proc_call)


State 93

   16 array_type: TYPE .

    $default  reduce using rule 16 (array_type)


State 94

   17 array_type: ARR . DEC OF array_type

    DEC  shift, and go to state 125


State 95

   14 type_of_decl: ARR DEC OF array_type .

    $default  reduce using rule 14 (type_of_decl)


State 96

   34 type_of_ret: ':' TYPE .

    $default  reduce using rule 34 (type_of_ret)


State 97

   35 func_body: ';' .

    $default  reduce using rule 35 (func_body)


State 98

   28 func_decl: ID '(' argument ')' type_of_ret func_body .

    $default  reduce using rule 28 (func_decl)


State 99

   36 func_body: compound_stmt . END

    END  shift, and go to state 126


State 100

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp
   90 multi_exp: exp .

    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    MOD  shift, and go to state 110
    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 90 (multi_exp)


State 101

   86 func_call: ID '(' arg2func . ')'

    ')'  shift, and go to state 127


State 102

   88 arg2func: multi_exp .
   89 multi_exp: multi_exp . ',' exp

    ','  shift, and go to state 128

    $default  reduce using rule 88 (arg2func)


State 103

   54 arr_ref: '[' exp . ']' arr_ref
   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    MOD  shift, and go to state 110
    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120
    ']'  shift, and go to state 129


State 104

   57 exp: NOT exp .
   58    | exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    MOD  shift, and go to state 110
    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 57 (exp)


State 105

   56 exp: '-' exp .
   58    | exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    MOD  shift, and go to state 110
    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 56 (exp)


State 106

   55 exp: '(' exp . ')'
   58    | exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    MOD  shift, and go to state 110
    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120
    ')'  shift, and go to state 130


State 107

   79 branch: IF exp THEN . compound_stmt branch_body END IF

    BEG  shift, and go to state 23

    compound_stmt  go to state 131


State 108

   58 exp: exp '*' . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 132
    func_call  go to state 81


State 109

   59 exp: exp '/' . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 133
    func_call  go to state 81


State 110

   60 exp: exp MOD . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 134
    func_call  go to state 81


State 111

   61 exp: exp '+' . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 135
    func_call  go to state 81


State 112

   62 exp: exp '-' . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 136
    func_call  go to state 81


State 113

   63 exp: exp LT . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 137
    func_call  go to state 81


State 114

   64 exp: exp LE . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 138
    func_call  go to state 81


State 115

   65 exp: exp NE . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 139
    func_call  go to state 81


State 116

   66 exp: exp GE . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 140
    func_call  go to state 81


State 117

   67 exp: exp GT . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 141
    func_call  go to state 81


State 118

   68 exp: exp EQ . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 142
    func_call  go to state 81


State 119

   69 exp: exp AND . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 143
    func_call  go to state 81


State 120

   70 exp: exp OR . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 144
    func_call  go to state 81


State 121

   83 for_stmt: FOR ID ASSIGN . DEC TO DEC DO compound_stmt END DO

    DEC  shift, and go to state 145


State 122

   82 while_stmt: WHILE exp DO . compound_stmt END DO

    BEG  shift, and go to state 23

    compound_stmt  go to state 146


State 123

   84 ret_stmt: RETURN exp ';' .

    $default  reduce using rule 84 (ret_stmt)


State 124

   49 simple_stmt: var_ref ASSIGN exp .
   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    MOD  shift, and go to state 110
    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 49 (simple_stmt)


State 125

   17 array_type: ARR DEC . OF array_type

    OF  shift, and go to state 147


State 126

   36 func_body: compound_stmt END .

    $default  reduce using rule 36 (func_body)


State 127

   86 func_call: ID '(' arg2func ')' .

    $default  reduce using rule 86 (func_call)


State 128

   89 multi_exp: multi_exp ',' . exp

    ID         shift, and go to state 45
    SCI        shift, and go to state 70
    FP         shift, and go to state 71
    OCT        shift, and go to state 72
    DEC        shift, and go to state 73
    BOOLCONST  shift, and go to state 74
    STR        shift, and go to state 75
    NOT        shift, and go to state 76
    '-'        shift, and go to state 77
    '('        shift, and go to state 78

    var_ref    go to state 79
    exp        go to state 148
    func_call  go to state 81


State 129

   54 arr_ref: '[' exp ']' . arr_ref

    '['  shift, and go to state 68

    $default  reduce using rule 53 (arr_ref)

    arr_ref  go to state 149


State 130

   55 exp: '(' exp ')' .

    $default  reduce using rule 55 (exp)


State 131

   79 branch: IF exp THEN compound_stmt . branch_body END IF

    ELSE  shift, and go to state 150

    $default  reduce using rule 80 (branch_body)

    branch_body  go to state 151


State 132

   58 exp: exp . '*' exp
   58    | exp '*' exp .
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 58 (exp)


State 133

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   59    | exp '/' exp .
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 59 (exp)


State 134

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   60    | exp MOD exp .
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 60 (exp)


State 135

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   61    | exp '+' exp .
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 61 (exp)


State 136

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   62    | exp '-' exp .
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 62 (exp)


State 137

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   63    | exp LT exp .
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 63 (exp)


State 138

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   64    | exp LE exp .
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 64 (exp)


State 139

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   65    | exp NE exp .
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 65 (exp)


State 140

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   66    | exp GE exp .
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 66 (exp)


State 141

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   67    | exp GT exp .
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp

    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 67 (exp)


State 142

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   68    | exp EQ exp .
   69    | exp . AND exp
   70    | exp . OR exp

    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 68 (exp)


State 143

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   69    | exp AND exp .
   70    | exp . OR exp

    OR  shift, and go to state 120

    $default  reduce using rule 69 (exp)


State 144

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp
   70    | exp OR exp .

    $default  reduce using rule 70 (exp)


State 145

   83 for_stmt: FOR ID ASSIGN DEC . TO DEC DO compound_stmt END DO

    TO  shift, and go to state 152


State 146

   82 while_stmt: WHILE exp DO compound_stmt . END DO

    END  shift, and go to state 153


State 147

   17 array_type: ARR DEC OF . array_type

    TYPE  shift, and go to state 93
    ARR   shift, and go to state 94

    array_type  go to state 154


State 148

   58 exp: exp . '*' exp
   59    | exp . '/' exp
   60    | exp . MOD exp
   61    | exp . '+' exp
   62    | exp . '-' exp
   63    | exp . LT exp
   64    | exp . LE exp
   65    | exp . NE exp
   66    | exp . GE exp
   67    | exp . GT exp
   68    | exp . EQ exp
   69    | exp . AND exp
   70    | exp . OR exp
   89 multi_exp: multi_exp ',' exp .

    '*'  shift, and go to state 108
    '/'  shift, and go to state 109
    MOD  shift, and go to state 110
    '+'  shift, and go to state 111
    '-'  shift, and go to state 112
    LT   shift, and go to state 113
    LE   shift, and go to state 114
    NE   shift, and go to state 115
    GE   shift, and go to state 116
    GT   shift, and go to state 117
    EQ   shift, and go to state 118
    AND  shift, and go to state 119
    OR   shift, and go to state 120

    $default  reduce using rule 89 (multi_exp)


State 149

   54 arr_ref: '[' exp ']' arr_ref .

    $default  reduce using rule 54 (arr_ref)


State 150

   81 branch_body: ELSE . compound_stmt

    BEG  shift, and go to state 23

    compound_stmt  go to state 155


State 151

   79 branch: IF exp THEN compound_stmt branch_body . END IF

    END  shift, and go to state 156


State 152

   83 for_stmt: FOR ID ASSIGN DEC TO . DEC DO compound_stmt END DO

    DEC  shift, and go to state 157


State 153

   82 while_stmt: WHILE exp DO compound_stmt END . DO

    DO  shift, and go to state 158


State 154

   17 array_type: ARR DEC OF array_type .

    $default  reduce using rule 17 (array_type)


State 155

   81 branch_body: ELSE compound_stmt .

    $default  reduce using rule 81 (branch_body)


State 156

   79 branch: IF exp THEN compound_stmt branch_body END . IF

    IF  shift, and go to state 159


State 157

   83 for_stmt: FOR ID ASSIGN DEC TO DEC . DO compound_stmt END DO

    DO  shift, and go to state 160


State 158

   82 while_stmt: WHILE exp DO compound_stmt END DO .

    $default  reduce using rule 82 (while_stmt)


State 159

   79 branch: IF exp THEN compound_stmt branch_body END IF .

    $default  reduce using rule 79 (branch)


State 160

   83 for_stmt: FOR ID ASSIGN DEC TO DEC DO . compound_stmt END DO

    BEG  shift, and go to state 23

    compound_stmt  go to state 161


State 161

   83 for_stmt: FOR ID ASSIGN DEC TO DEC DO compound_stmt . END DO

    END  shift, and go to state 162


State 162

   83 for_stmt: FOR ID ASSIGN DEC TO DEC DO compound_stmt END . DO

    DO  shift, and go to state 163


State 163

   83 for_stmt: FOR ID ASSIGN DEC TO DEC DO compound_stmt END DO .

    $default  reduce using rule 83 (for_stmt)
